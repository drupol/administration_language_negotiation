<?php

define('LANGUAGE_NEGOTIATION_ADMINISTRATION', 'language-administration');

/**
 * Implements hook_menu().
 */
function administration_language_negotiation_menu() {
  $items = array();

  $items['admin/config/regional/language/configure/administration_language'] = array(
    'title' => 'Administration language negotiation',
    'description' => 'Configure the administration language negotiation',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('administration_language_negotiation_admin'),
    'access arguments' => array('administer languages'),
    'file' => 'administration_language_negotiation.admin.inc',
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
  );

  return $items;
}

/**
 * Implements hook_language_negotiation_info().
 */
function administration_language_negotiation_language_negotiation_info() {
  return array(
    LANGUAGE_NEGOTIATION_ADMINISTRATION => array(
      'types' => array(
        LANGUAGE_TYPE_INTERFACE,
      ),
      'callbacks' => array(
        'language' => 'administration_language_negotiation_admin_language',
      ),
      'file' => drupal_get_path('module', 'administration_language_negotiation') . '/administration_language_negotiation.module',
      'weight' => -50,
      'name' => t('Administration path'),
      'description' => t('Set a default language on specific paths.'),
      'config' => 'admin/config/regional/language/configure/administration_language',
    )
  );
}

/**
 * Language negotiation custom callback.
 */
function administration_language_negotiation_admin_language() {
  include 'includes/path.inc';

  $admin_path = array_filter(variable_get('administration_language_negotiation_paths', array()));

  $languages = language_list('enabled');
  foreach ($languages[1] as $language) {
    if ($language->prefix) {
      foreach ($admin_path as $path) {
        $admin_path[] = $language->prefix . '/' . trim($path, '/');
      }
    }
  }

  if (drupal_match_path(current_path(), implode("\n", $admin_path))) {
    return variable_get('administration_language_negotiation_default', FALSE);
  }

  return FALSE;
}

/**
 * Implements hook_menu_link_alter().
 */
function administration_language_negotiation_menu_link_alter(&$item) {
  if ('management' == $item['menu_name'] || 'user/logout' == $item['link_path']) {
    $item['options']['alter'] = TRUE;
  }
}

/**
 * Implements hook_translated_menu_link_alter().
 */
function administration_language_negotiation_translated_menu_link_alter(&$item, $map) {
  if ('management' == $item['menu_name'] || 'user/logout' == $item['link_path']) {
    if ($default_language = variable_get('administration_language_negotiation_default', FALSE)) {
      global $language;

      $languages = language_list('enabled');
      if (isset($languages[1][$default_language])) {
        // save the current language and activate the administration language...
        $current_language = $language;
        $language = $languages[1][$default_language];

        // ...modify the menu item...
        _menu_item_localize($item, $map, TRUE);
        if ('user/logout' == $item['link_path']) {
          $item['title'] = t('Log out');
        }

        if ($item['title_callback'] == 't' && !empty($item['title_arguments'])) {
          $item['title'] = t($item['title'], menu_unserialize($item['title_arguments'], $map));
        }

        // ...and restore the previous language
        $language = $current_language;
      }
    }
  }
}
